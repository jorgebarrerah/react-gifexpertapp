{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","c","type","placeholder","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","console","log","json","data","gifts","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAC,OAAKP,GAAL,mBAAoBO,OACnCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,YAAY,mBACZC,MAAQV,EACRW,SApBa,SAACR,GACtBF,EAAeE,EAAES,OAAOF,a,QCNjB,SAASG,EAAT,GAAqC,IAAdC,EAAa,EAAbA,MAAOC,EAAM,EAANA,IAEzC,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,O,2BCPHK,EAAO,uCAAI,WAAMC,GAAN,uBAAAC,EAAA,4DACL,mCACK,uCACdN,EAHc,UAEA,uCAFA,oBACL,mCADK,cAG8BO,UAAUF,GAHxC,sBAIDG,MAAOR,GAJN,cAIdS,EAJc,OAKpBC,QAAQC,IAAIX,GALQ,SAMCS,EAAKG,OANN,uBAMbC,EANa,EAMbA,KAEDC,EAAQD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRlB,MAAOiB,EAAIjB,MACXC,IAAG,UAAEgB,EAAIE,cAAN,aAAE,EAAYC,iBAAiBnB,QAZtB,kBAebc,GAfa,4CAAJ,sDCGPM,EAAU,SAAC,GAAiB,IAAff,EAAc,EAAdA,SACtB,ECDwB,SAACA,GACzB,MAA0BrB,mBAAS,CAC/B6B,KAAM,GACNQ,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNpB,EAAQC,GACHoB,MAAK,SAAAC,GACFH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAGtB,CAAChB,IAEGiB,EDfwBK,CAAatB,GAAhCa,EAAZ,EAAOL,KAAaQ,EAApB,EAAoBA,QACpB,OACI,qCACI,6BAAKhB,IACHgB,GAAW,2CACb,qBAAKpB,UAAU,YAAf,SAEKiB,EAAOH,KACJ,SAAAC,GAAG,OACH,cAAClB,EAAD,eAEYkB,GADEA,EAAIC,aEVzBW,EAAe,WAGxB,MAAoC5C,mBAAS,CAAC,gBAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAGA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ8C,EAAWd,KAAM,SAAAV,GAAQ,OACtB,cAAC,EAAD,CAEAA,SAAUA,GADLA,Y,MCb5ByB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.c66d2dc6.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputValue = (e) => {\r\n        setInputValue (e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2)\r\n        {\r\n            setCategories(c => [inputValue, ...c]);\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                placeholder=\"Enter a category\"\r\n                value= {inputValue}\r\n                onChange={handleInputValue}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","import React from 'react'\r\n\r\nexport default function GifGridItem({ title, url}) {\r\n    \r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","export const getGifs  = async(category) => {\r\n    const ApiKey = 'oPf76Uc47Nw1mXeWeSb31WvHf207InNz'\r\n    const ApiEndpoint = 'https://api.giphy.com/v1/gifs/search'\r\n    const url = `${ApiEndpoint}?api_key=${ApiKey}&q=${encodeURI(category)}&limit=10`\r\n    const resp = await fetch (url);\r\n    console.log(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifts = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifts;\r\n}","import GifGridItem from './GifGridItem'\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\"\r\n\r\nexport const GifGrid = ( {category}) => {\r\n    const {data:images, loading} = useFetchGifs(category);\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n             {loading && <p>Loading...</p>}\r\n            <div className=\"card-grid\">\r\n                \r\n                {images.map (\r\n                    img => (\r\n                    <GifGridItem \r\n                            key= {img.id}\r\n                            {...img}/>\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) =>  {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            });\r\n    }, [category])\r\n\r\n    return state\r\n}","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    \r\n    const [categories, setCategories] = useState(['Dragon Ball'])\r\n\r\n\r\n    return (\r\n        <>\r\n            <h1>GifExpertApp</h1>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    categories.map ( category => (\r\n                       <GifGrid \r\n                       key={category}\r\n                       category={category} />\r\n                        ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}